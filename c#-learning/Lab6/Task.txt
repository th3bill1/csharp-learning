
Your task is to implement Fraction structure.

It should contain two public properties: Numerator and Denominator.
For integers represented as fraction the denominator should be 1.
The denominator should be always positive - sign of the fraction should be placed in the numerator.
ArgumentException should be thrown when denominator is set to 0 or negative number.

The structure has 2 public constructors:
* 2-parameters constructor (long n, long d) 
* 1-parameter constructor (long n). For 1-parameter constructor the denominator is set to 1.

You should implement method to simplify fraction, eg. [2/4] -> [1/2], [3/9] -> [1/3]. 
The helper method to calculate greatest common divisor would be helpful to calculate simplified fraction.
The fraction should be always smplified (also when numerator or denominator changed).

You need to implement Reciprocal() method to invert the fraction, eg. [2/3] -> [3/2] ([1 1/2]). 
Reciprocal method should return simplified fraction too.

You need to implement 3 converters
- implicit from long type to Fraction
- explicit from Fraction to long
- explicit from Fraction to double

You need to implement arithmetic operators + - * / and unary -. Be aware of an overflow during operations on large numbers.
The operators should return simplified fractions.

You need to implement comparison operators == != < > <= >= and override methods related to these operators.

Note! You can't use any floating point types inside Fraction structure (except implementation of conversion to double)

Points:
1.5p - constructors, properties, simplify fraction and Reciprocal() method
1.5p - converters and arithmetic operators
1p - comparison operators and methods related to them
1p - hard tests (operations on large numbers)